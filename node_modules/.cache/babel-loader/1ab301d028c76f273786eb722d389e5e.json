{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Documents/elevation-profile/src/Chart/chartSVGGenerator.js\";\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useRef } from 'react'; // import * as d3 from 'd3';\n\nimport { extent } from 'd3-array';\nimport { axisLeft } from 'd3-axis';\nimport { scaleDiverging, scaleLinear } from 'd3-scale';\nimport { select, selectAll } from 'd3-selection';\nimport { line as d3line, curveMonotoneX } from 'd3-shape';\nimport { interpolateRdBu } from 'd3-scale-chromatic';\n\nconst ChartSVG = ({\n  chartProps,\n  elevationData\n}) => {\n  const {\n    width,\n    height,\n    margin\n  } = chartProps;\n  const ref = useRef();\n  useEffect(() => {\n    selectAll('svg > *').remove();\n    const svg = select(ref.current);\n    svg.attr('viewBox', [0, 0, width, height]); // const { minElev, maxElev } = elevationData.reduce(\n    //   (acc, point) => {\n    //     let { min, max } = acc;\n    //     min = Math.min(min, point.elevation);\n    //     max = Math.max(max, point.elevation);\n    //     return { min, max };\n    //   },\n    //   { minElev: Infinity, maxElev: -Infinity },\n    // );\n\n    const color = scaleDiverging(t => interpolateRdBu(1 - t)).domain([-11000, 0, 9000]);\n    const x = scaleLinear().domain([0, elevationData.length]).range([margin.left, width - margin.right]);\n    const y = scaleLinear().domain(extent(elevationData, r => r.elevation)) // .domain([minElev, maxElev])\n    .nice().range([height - margin.bottom, margin.top]);\n\n    const xAxis = g => g.attr('transform', `translate(0,${height - margin.bottom})`) // .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0))\n    .call(g => g.select('.domain').remove());\n\n    const yAxis = g => g.attr('transform', `translate(${margin.left},0)`).call(axisLeft(y)).call(g => g.select('.domain').remove()).call(g => g.select('.tick:last-of-type text').append('tspan').text(' meters')); // const scaleIndex = scaleLinear()\n    //   .domain([0, elevationData.length])\n    //   .range([10, width - 10]);\n    // const scaleElev = scaleLinear()\n    //   .domain([maxElev, minElev])\n    //   .range([10, height]);\n\n\n    const line = d3line().curve(curveMonotoneX).defined(d => !Number.isNaN(d.elevation)).x(d => x(d.index)).y(d => y(d.elevation));\n    svg.append('g').call(xAxis);\n    svg.append('g').call(yAxis);\n    const svgDefs = svg.append('defs');\n    const mainGradient = svgDefs.append('linearGradient').attr('id', 'mainGradient');\n    mainGradient.attr('id', 'gradient').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height - margin.bottom).attr('x2', 0).attr('y2', margin.top).selectAll('stop').join('stop').attr('offset', d => d).attr('stop-color', color.interpolator());\n    svg.append('path').datum(elevationData).attr('fill', 'transparent') // .attr('stroke', 'url(#gradient)')\n    .attr('stroke-width', 3).attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('d', line) // .style('stroke', 'url(#gradient)');\n    .style('stroke', '#222');\n  }, [elevationData]);\n  return React.createElement(\"svg\", {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  });\n};\n\nexport default ChartSVG;","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/Chart/chartSVGGenerator.js"],"names":["React","useEffect","useRef","extent","axisLeft","scaleDiverging","scaleLinear","select","selectAll","line","d3line","curveMonotoneX","interpolateRdBu","ChartSVG","chartProps","elevationData","width","height","margin","ref","remove","svg","current","attr","color","t","domain","x","length","range","left","right","y","r","elevation","nice","bottom","top","xAxis","g","call","yAxis","append","text","curve","defined","d","Number","isNaN","index","svgDefs","mainGradient","join","interpolator","datum","style"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC,C,CACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,UAA5C;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,cAAlC;AACA,SAASC,IAAI,IAAIC,MAAjB,EAAyBC,cAAzB,QAA+C,UAA/C;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAmC;AAClD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA4BJ,UAAlC;AAEA,QAAMK,GAAG,GAAGjB,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,SAAS,CAAC,SAAD,CAAT,CAAqBY,MAArB;AACA,UAAMC,GAAG,GAAGd,MAAM,CAACY,GAAG,CAACG,OAAL,CAAlB;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,SAAT,EAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOP,KAAP,EAAcC,MAAd,CAApB,EAHc,CAKd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMO,KAAK,GAAGnB,cAAc,CAACoB,CAAC,IAAIb,eAAe,CAAC,IAAIa,CAAL,CAArB,CAAd,CAA4CC,MAA5C,CAAmD,CAC/D,CAAC,KAD8D,EAE/D,CAF+D,EAG/D,IAH+D,CAAnD,CAAd;AAMA,UAAMC,CAAC,GAAGrB,WAAW,GAClBoB,MADO,CACA,CAAC,CAAD,EAAIX,aAAa,CAACa,MAAlB,CADA,EAEPC,KAFO,CAED,CAACX,MAAM,CAACY,IAAR,EAAcd,KAAK,GAAGE,MAAM,CAACa,KAA7B,CAFC,CAAV;AAIA,UAAMC,CAAC,GAAG1B,WAAW,GAClBoB,MADO,CACAvB,MAAM,CAACY,aAAD,EAAgBkB,CAAC,IAAIA,CAAC,CAACC,SAAvB,CADN,EAER;AAFQ,KAGPC,IAHO,GAIPN,KAJO,CAID,CAACZ,MAAM,GAAGC,MAAM,CAACkB,MAAjB,EAAyBlB,MAAM,CAACmB,GAAhC,CAJC,CAAV;;AAMA,UAAMC,KAAK,GAAGC,CAAC,IACbA,CAAC,CACEhB,IADH,CACQ,WADR,EACsB,eAAcN,MAAM,GAAGC,MAAM,CAACkB,MAAO,GAD3D,EAEE;AAFF,KAGGI,IAHH,CAGQD,CAAC,IAAIA,CAAC,CAAChC,MAAF,CAAS,SAAT,EAAoBa,MAApB,EAHb,CADF;;AAMA,UAAMqB,KAAK,GAAGF,CAAC,IACbA,CAAC,CACEhB,IADH,CACQ,WADR,EACsB,aAAYL,MAAM,CAACY,IAAK,KAD9C,EAEGU,IAFH,CAEQpC,QAAQ,CAAC4B,CAAD,CAFhB,EAGGQ,IAHH,CAGQD,CAAC,IAAIA,CAAC,CAAChC,MAAF,CAAS,SAAT,EAAoBa,MAApB,EAHb,EAIGoB,IAJH,CAIQD,CAAC,IACLA,CAAC,CACEhC,MADH,CACU,yBADV,EAEGmC,MAFH,CAEU,OAFV,EAGGC,IAHH,CAGQ,SAHR,CALJ,CADF,CArCc,CAiDd;AACA;AACA;AAEA;AACA;AACA;;;AAEA,UAAMlC,IAAI,GAAGC,MAAM,GAChBkC,KADU,CACJjC,cADI,EAEVkC,OAFU,CAEFC,CAAC,IAAI,CAACC,MAAM,CAACC,KAAP,CAAaF,CAAC,CAACZ,SAAf,CAFJ,EAGVP,CAHU,CAGRmB,CAAC,IAAInB,CAAC,CAACmB,CAAC,CAACG,KAAH,CAHE,EAIVjB,CAJU,CAIRc,CAAC,IAAId,CAAC,CAACc,CAAC,CAACZ,SAAH,CAJE,CAAb;AAMAb,IAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqBF,KAArB;AAEAjB,IAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqBC,KAArB;AAEA,UAAMS,OAAO,GAAG7B,GAAG,CAACqB,MAAJ,CAAW,MAAX,CAAhB;AAEA,UAAMS,YAAY,GAAGD,OAAO,CACzBR,MADkB,CACX,gBADW,EAElBnB,IAFkB,CAEb,IAFa,EAEP,cAFO,CAArB;AAIA4B,IAAAA,YAAY,CACT5B,IADH,CACQ,IADR,EACc,UADd,EAEGA,IAFH,CAEQ,eAFR,EAEyB,gBAFzB,EAGGA,IAHH,CAGQ,IAHR,EAGc,CAHd,EAIGA,IAJH,CAIQ,IAJR,EAIcN,MAAM,GAAGC,MAAM,CAACkB,MAJ9B,EAKGb,IALH,CAKQ,IALR,EAKc,CALd,EAMGA,IANH,CAMQ,IANR,EAMcL,MAAM,CAACmB,GANrB,EAOG7B,SAPH,CAOa,MAPb,EAQG4C,IARH,CAQQ,MARR,EASG7B,IATH,CASQ,QATR,EASkBuB,CAAC,IAAIA,CATvB,EAUGvB,IAVH,CAUQ,YAVR,EAUsBC,KAAK,CAAC6B,YAAN,EAVtB;AAYAhC,IAAAA,GAAG,CACAqB,MADH,CACU,MADV,EAEGY,KAFH,CAESvC,aAFT,EAGGQ,IAHH,CAGQ,MAHR,EAGgB,aAHhB,EAIE;AAJF,KAKGA,IALH,CAKQ,cALR,EAKwB,CALxB,EAMGA,IANH,CAMQ,iBANR,EAM2B,OAN3B,EAOGA,IAPH,CAOQ,gBAPR,EAO0B,OAP1B,EAQGA,IARH,CAQQ,GARR,EAQad,IARb,EASE;AATF,KAUG8C,KAVH,CAUS,QAVT,EAUmB,MAVnB;AAWD,GAhGQ,EAgGN,CAACxC,aAAD,CAhGM,CAAT;AAiGA,SAAO;AAAK,IAAA,GAAG,EAAEI,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvGD;;AAyGA,eAAeN,QAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect, useRef } from 'react';\n// import * as d3 from 'd3';\nimport { extent } from 'd3-array';\nimport { axisLeft } from 'd3-axis';\nimport { scaleDiverging, scaleLinear } from 'd3-scale';\nimport { select, selectAll } from 'd3-selection';\nimport { line as d3line, curveMonotoneX } from 'd3-shape';\nimport { interpolateRdBu } from 'd3-scale-chromatic';\n\nconst ChartSVG = ({ chartProps, elevationData }) => {\n  const { width, height, margin } = chartProps;\n\n  const ref = useRef();\n\n  useEffect(() => {\n    selectAll('svg > *').remove();\n    const svg = select(ref.current);\n    svg.attr('viewBox', [0, 0, width, height]);\n\n    // const { minElev, maxElev } = elevationData.reduce(\n    //   (acc, point) => {\n    //     let { min, max } = acc;\n    //     min = Math.min(min, point.elevation);\n    //     max = Math.max(max, point.elevation);\n    //     return { min, max };\n    //   },\n    //   { minElev: Infinity, maxElev: -Infinity },\n    // );\n\n    const color = scaleDiverging(t => interpolateRdBu(1 - t)).domain([\n      -11000,\n      0,\n      9000,\n    ]);\n\n    const x = scaleLinear()\n      .domain([0, elevationData.length])\n      .range([margin.left, width - margin.right]);\n\n    const y = scaleLinear()\n      .domain(extent(elevationData, r => r.elevation))\n      // .domain([minElev, maxElev])\n      .nice()\n      .range([height - margin.bottom, margin.top]);\n\n    const xAxis = g =>\n      g\n        .attr('transform', `translate(0,${height - margin.bottom})`)\n        // .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0))\n        .call(g => g.select('.domain').remove());\n\n    const yAxis = g =>\n      g\n        .attr('transform', `translate(${margin.left},0)`)\n        .call(axisLeft(y))\n        .call(g => g.select('.domain').remove())\n        .call(g =>\n          g\n            .select('.tick:last-of-type text')\n            .append('tspan')\n            .text(' meters'),\n        );\n\n    // const scaleIndex = scaleLinear()\n    //   .domain([0, elevationData.length])\n    //   .range([10, width - 10]);\n\n    // const scaleElev = scaleLinear()\n    //   .domain([maxElev, minElev])\n    //   .range([10, height]);\n\n    const line = d3line()\n      .curve(curveMonotoneX)\n      .defined(d => !Number.isNaN(d.elevation))\n      .x(d => x(d.index))\n      .y(d => y(d.elevation));\n\n    svg.append('g').call(xAxis);\n\n    svg.append('g').call(yAxis);\n\n    const svgDefs = svg.append('defs');\n\n    const mainGradient = svgDefs\n      .append('linearGradient')\n      .attr('id', 'mainGradient');\n\n    mainGradient\n      .attr('id', 'gradient')\n      .attr('gradientUnits', 'userSpaceOnUse')\n      .attr('x1', 0)\n      .attr('y1', height - margin.bottom)\n      .attr('x2', 0)\n      .attr('y2', margin.top)\n      .selectAll('stop')\n      .join('stop')\n      .attr('offset', d => d)\n      .attr('stop-color', color.interpolator());\n\n    svg\n      .append('path')\n      .datum(elevationData)\n      .attr('fill', 'transparent')\n      // .attr('stroke', 'url(#gradient)')\n      .attr('stroke-width', 3)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round')\n      .attr('d', line)\n      // .style('stroke', 'url(#gradient)');\n      .style('stroke', '#222');\n  }, [elevationData]);\n  return <svg ref={ref} />;\n};\n\nexport default ChartSVG;\n"]},"metadata":{},"sourceType":"module"}