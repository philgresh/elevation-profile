{"ast":null,"code":"import { Client } from '@googlemaps/google-maps-services-js';\nconst NUM_SAMPLES = 100;\n\nconst replotPointsNearAntimeridian = pins => {\n  const newPins = pins.map(([lng, lat]) => {\n    let newLng = lng;\n    if (lng > 180) newLng -= 360;\n    if (lng < -180) newLng += 360;\n    return [newLng, lat];\n  });\n  return newPins;\n};\n\nconst getURLParams = async pins => {\n  const samples = Math.max(NUM_SAMPLES * (pins.length - 1), 500);\n  const newPins = replotPointsNearAntimeridian(pins);\n  const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n  const path = newPins.reduce((acc, [lng, lat], index) => {\n    let newAcc = `${acc}${lat},${lng}`;\n    if (index !== newPins.length - 1) newAcc += '|';\n    return newAcc;\n  }, '');\n  const params = {\n    samples,\n    path,\n    key\n  };\n  const url = 'https://maps.googleapis.com/maps/api/elevation/json'; // process.env.NODE_ENV === 'production'\n  //   ? 'https://maps.googleapis.com/maps/api/elevation/json'\n  //   : 'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/elevation/json';\n\n  return {\n    url,\n    params\n  };\n};\n\nconst indexedElevData = data => {\n  return data.results.map((p, index) => ({\n    index,\n    elevation: p.elevation,\n    lat: p.location.lat,\n    lng: p.location.lng\n  }));\n};\n\nexport const setSubmitting = ({\n  submitting\n}) => {\n  return dispatch => {\n    dispatch({\n      submitting,\n      type: 'SET_SUBMITTING'\n    });\n  };\n};\nexport const getElevationDataAction = () => {\n  return async (dispatch, getState) => {\n    const {\n      map\n    } = getState();\n    const {\n      pins: locations\n    } = map;\n    const gmapsClient = new Client({});\n    const samples = Math.max(NUM_SAMPLES * (locations.length - 1), 500);\n    const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n    dispatch(setSubmitting({\n      submitting: true\n    })); // eslint-disable-next-line no-return-await\n\n    return await gmapsClient.elevation({\n      params: {\n        locations,\n        samples,\n        key\n      },\n      method: 'post',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        crossorigin: true\n      },\n      timeout: 1500 // milliseconds\n\n    }).then(response => {\n      const {\n        data\n      } = response;\n      console.log(response);\n      const indexedData = indexedElevData(data);\n      dispatch({\n        type: 'SET_ELEVATION_DATA',\n        elevationData: [...indexedData],\n        mapHeight: '75vh'\n      });\n    }).catch(err => {\n      console.error(err);\n    }).finally(() => dispatch(setSubmitting({\n      submitting: false\n    })));\n  };\n};","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/store/actions/chartActions.js"],"names":["Client","NUM_SAMPLES","replotPointsNearAntimeridian","pins","newPins","map","lng","lat","newLng","getURLParams","samples","Math","max","length","key","process","env","REACT_APP_GOOGLE_MAPS_ELEV_API_KEY","path","reduce","acc","index","newAcc","params","url","indexedElevData","data","results","p","elevation","location","setSubmitting","submitting","dispatch","type","getElevationDataAction","getState","locations","gmapsClient","method","headers","crossorigin","timeout","then","response","console","log","indexedData","elevationData","mapHeight","catch","err","error","finally"],"mappings":"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","sourcesContent":["import { Client } from '@googlemaps/google-maps-services-js';\nconst NUM_SAMPLES = 100;\n\nconst replotPointsNearAntimeridian = pins => {\n  const newPins = pins.map(([lng, lat]) => {\n    let newLng = lng;\n    if (lng > 180) newLng -= 360;\n    if (lng < -180) newLng += 360;\n    return [newLng, lat];\n  });\n  return newPins;\n};\n\nconst getURLParams = async pins => {\n  const samples = Math.max(NUM_SAMPLES * (pins.length - 1), 500);\n  const newPins = replotPointsNearAntimeridian(pins);\n  const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n  const path = newPins.reduce((acc, [lng, lat], index) => {\n    let newAcc = `${acc}${lat},${lng}`;\n    if (index !== newPins.length - 1) newAcc += '|';\n    return newAcc;\n  }, '');\n  const params = {\n    samples,\n    path,\n    key,\n  };\n  const url = 'https://maps.googleapis.com/maps/api/elevation/json';\n  // process.env.NODE_ENV === 'production'\n  //   ? 'https://maps.googleapis.com/maps/api/elevation/json'\n  //   : 'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/elevation/json';\n  return { url, params };\n};\n\nconst indexedElevData = data => {\n  return data.results.map((p, index) => ({\n    index,\n    elevation: p.elevation,\n    lat: p.location.lat,\n    lng: p.location.lng,\n  }));\n};\n\nexport const setSubmitting = ({ submitting }) => {\n  return dispatch => {\n    dispatch({ submitting, type: 'SET_SUBMITTING' });\n  };\n};\n\nexport const getElevationDataAction = () => {\n  return async (dispatch, getState) => {\n    const { map } = getState();\n    const { pins: locations } = map;\n    const gmapsClient = new Client({});\n    const samples = Math.max(NUM_SAMPLES * (locations.length - 1), 500);\n    const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n\n    dispatch(setSubmitting({ submitting: true }));\n\n    // eslint-disable-next-line no-return-await\n    return await gmapsClient\n      .elevation({\n        params: {\n          locations,\n          samples,\n          key,\n        },\n        method: 'post',\n        headers: { 'X-Requested-With': 'XMLHttpRequest', crossorigin: true },\n        timeout: 1500, // milliseconds\n      })\n      .then(response => {\n        const { data } = response;\n        console.log(response);\n        const indexedData = indexedElevData(data);\n        dispatch({\n          type: 'SET_ELEVATION_DATA',\n          elevationData: [...indexedData],\n          mapHeight: '75vh',\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      })\n      .finally(() => dispatch(setSubmitting({ submitting: false })));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}