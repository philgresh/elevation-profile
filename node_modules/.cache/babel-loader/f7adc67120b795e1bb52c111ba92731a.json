{"ast":null,"code":"import axios from 'axios'; // import fetch from 'cross-fetch';\n\nconst NUM_SAMPLES = 100;\n\nconst replotPointsNearAntimeridian = pins => {\n  const newPins = pins.map(([lng, lat]) => {\n    let newLng = lng;\n    if (lng > 180) newLng -= 360;\n    if (lng < -180) newLng += 360;\n    return [newLng, lat];\n  });\n  return newPins;\n};\n\nconst getURLParams = async pins => {\n  const samples = Math.min(NUM_SAMPLES * (pins.length - 1), 500);\n  const newPins = replotPointsNearAntimeridian(pins);\n  const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n  const path = newPins.reduce((acc, [lng, lat], index) => {\n    let newAcc = `${acc}${lat},${lng}`;\n    if (index !== newPins.length - 1) newAcc += '|';\n    return newAcc;\n  }, '');\n  const params = {\n    samples,\n    path,\n    key\n  };\n  const url = 'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/elevation/json';\n  return {\n    url,\n    params\n  };\n};\n\nconst indexedElevData = data => {\n  return data.results.map((p, index) => ({\n    index,\n    elevation: p.elevation,\n    lat: p.location.lat,\n    lng: p.location.lng\n  }));\n};\n\nexport const setSubmitting = ({\n  submitting\n}) => {\n  return dispatch => {\n    dispatch({\n      submitting,\n      type: 'SET_SUBMITTING'\n    });\n  };\n};\nexport const getElevationDataAction = () => {\n  return async (dispatch, getState) => {\n    const {\n      map\n    } = getState();\n    const {\n      pins\n    } = map;\n    dispatch(setSubmitting({\n      submitting: true\n    }));\n    const {\n      url,\n      params\n    } = await getURLParams(pins); // eslint-disable-next-line no-return-await\n\n    return await axios.get(url, {\n      params\n    }).then(({\n      data\n    }) => {\n      const indexedData = indexedElevData(data);\n      dispatch({\n        type: 'SET_ELEVATION_DATA',\n        elevationData: [...indexedData]\n      });\n      dispatch({\n        type: 'SET_MAP_HEIGHT',\n        mapHeight: '75vh'\n      });\n    }).catch(err => {\n      console.error(err);\n    }).finally(() => dispatch(setSubmitting({\n      submitting: false\n    })));\n  };\n};","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/store/actions/chartActions.js"],"names":["axios","NUM_SAMPLES","replotPointsNearAntimeridian","pins","newPins","map","lng","lat","newLng","getURLParams","samples","Math","min","length","key","process","env","REACT_APP_GOOGLE_MAPS_ELEV_API_KEY","path","reduce","acc","index","newAcc","params","url","indexedElevData","data","results","p","elevation","location","setSubmitting","submitting","dispatch","type","getElevationDataAction","getState","get","then","indexedData","elevationData","mapHeight","catch","err","console","error","finally"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,WAAW,GAAG,GAApB;;AAEA,MAAMC,4BAA4B,GAAGC,IAAI,IAAI;AAC3C,QAAMC,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAS,CAAC,CAACC,GAAD,EAAMC,GAAN,CAAD,KAAgB;AACvC,QAAIC,MAAM,GAAGF,GAAb;AACA,QAAIA,GAAG,GAAG,GAAV,EAAeE,MAAM,IAAI,GAAV;AACf,QAAIF,GAAG,GAAG,CAAC,GAAX,EAAgBE,MAAM,IAAI,GAAV;AAChB,WAAO,CAACA,MAAD,EAASD,GAAT,CAAP;AACD,GALe,CAAhB;AAMA,SAAOH,OAAP;AACD,CARD;;AAUA,MAAMK,YAAY,GAAG,MAAMN,IAAN,IAAc;AACjC,QAAMO,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASX,WAAW,IAAIE,IAAI,CAACU,MAAL,GAAc,CAAlB,CAApB,EAA0C,GAA1C,CAAhB;AACA,QAAMT,OAAO,GAAGF,4BAA4B,CAACC,IAAD,CAA5C;AACA,QAAMW,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,kCAAxB;AACA,QAAMC,IAAI,GAAGd,OAAO,CAACe,MAAR,CAAe,CAACC,GAAD,EAAM,CAACd,GAAD,EAAMC,GAAN,CAAN,EAAkBc,KAAlB,KAA4B;AACtD,QAAIC,MAAM,GAAI,GAAEF,GAAI,GAAEb,GAAI,IAAGD,GAAI,EAAjC;AACA,QAAIe,KAAK,KAAKjB,OAAO,CAACS,MAAR,GAAiB,CAA/B,EAAkCS,MAAM,IAAI,GAAV;AAClC,WAAOA,MAAP;AACD,GAJY,EAIV,EAJU,CAAb;AAKA,QAAMC,MAAM,GAAG;AACbb,IAAAA,OADa;AAEbQ,IAAAA,IAFa;AAGbJ,IAAAA;AAHa,GAAf;AAKA,QAAMU,GAAG,GACP,yFADF;AAEA,SAAO;AAAEA,IAAAA,GAAF;AAAOD,IAAAA;AAAP,GAAP;AACD,CAjBD;;AAmBA,MAAME,eAAe,GAAGC,IAAI,IAAI;AAC9B,SAAOA,IAAI,CAACC,OAAL,CAAatB,GAAb,CAAiB,CAACuB,CAAD,EAAIP,KAAJ,MAAe;AACrCA,IAAAA,KADqC;AAErCQ,IAAAA,SAAS,EAAED,CAAC,CAACC,SAFwB;AAGrCtB,IAAAA,GAAG,EAAEqB,CAAC,CAACE,QAAF,CAAWvB,GAHqB;AAIrCD,IAAAA,GAAG,EAAEsB,CAAC,CAACE,QAAF,CAAWxB;AAJqB,GAAf,CAAjB,CAAP;AAMD,CAPD;;AASA,OAAO,MAAMyB,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAED,MAAAA,UAAF;AAAcE,MAAAA,IAAI,EAAE;AAApB,KAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AAC1C,SAAO,OAAOF,QAAP,EAAiBG,QAAjB,KAA8B;AACnC,UAAM;AAAE/B,MAAAA;AAAF,QAAU+B,QAAQ,EAAxB;AACA,UAAM;AAAEjC,MAAAA;AAAF,QAAWE,GAAjB;AAEA4B,IAAAA,QAAQ,CAACF,aAAa,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAd,CAAR;AAEA,UAAM;AAAER,MAAAA,GAAF;AAAOD,MAAAA;AAAP,QAAkB,MAAMd,YAAY,CAACN,IAAD,CAA1C,CANmC,CAQnC;;AACA,WAAO,MAAMH,KAAK,CACfqC,GADU,CACNb,GADM,EACD;AAAED,MAAAA;AAAF,KADC,EAEVe,IAFU,CAEL,CAAC;AAAEZ,MAAAA;AAAF,KAAD,KAAc;AAClB,YAAMa,WAAW,GAAGd,eAAe,CAACC,IAAD,CAAnC;AACAO,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAE,oBADC;AAEPM,QAAAA,aAAa,EAAE,CAAC,GAAGD,WAAJ;AAFR,OAAD,CAAR;AAIAN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,gBAAR;AAA0BO,QAAAA,SAAS,EAAE;AAArC,OAAD,CAAR;AACD,KATU,EAUVC,KAVU,CAUJC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAZU,EAaVG,OAbU,CAaF,MAAMb,QAAQ,CAACF,aAAa,CAAC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAd,CAbZ,CAAb;AAcD,GAvBD;AAwBD,CAzBM","sourcesContent":["import axios from 'axios';\n// import fetch from 'cross-fetch';\nconst NUM_SAMPLES = 100;\n\nconst replotPointsNearAntimeridian = pins => {\n  const newPins = pins.map(([lng, lat]) => {\n    let newLng = lng;\n    if (lng > 180) newLng -= 360;\n    if (lng < -180) newLng += 360;\n    return [newLng, lat];\n  });\n  return newPins;\n};\n\nconst getURLParams = async pins => {\n  const samples = Math.min(NUM_SAMPLES * (pins.length - 1), 500);\n  const newPins = replotPointsNearAntimeridian(pins);\n  const key = process.env.REACT_APP_GOOGLE_MAPS_ELEV_API_KEY;\n  const path = newPins.reduce((acc, [lng, lat], index) => {\n    let newAcc = `${acc}${lat},${lng}`;\n    if (index !== newPins.length - 1) newAcc += '|';\n    return newAcc;\n  }, '');\n  const params = {\n    samples,\n    path,\n    key,\n  };\n  const url =\n    'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/elevation/json';\n  return { url, params };\n};\n\nconst indexedElevData = data => {\n  return data.results.map((p, index) => ({\n    index,\n    elevation: p.elevation,\n    lat: p.location.lat,\n    lng: p.location.lng,\n  }));\n};\n\nexport const setSubmitting = ({ submitting }) => {\n  return dispatch => {\n    dispatch({ submitting, type: 'SET_SUBMITTING' });\n  };\n};\n\nexport const getElevationDataAction = () => {\n  return async (dispatch, getState) => {\n    const { map } = getState();\n    const { pins } = map;\n\n    dispatch(setSubmitting({ submitting: true }));\n\n    const { url, params } = await getURLParams(pins);\n\n    // eslint-disable-next-line no-return-await\n    return await axios\n      .get(url, { params })\n      .then(({ data }) => {\n        const indexedData = indexedElevData(data);\n        dispatch({\n          type: 'SET_ELEVATION_DATA',\n          elevationData: [...indexedData],\n        });\n        dispatch({ type: 'SET_MAP_HEIGHT', mapHeight: '75vh' });\n      })\n      .catch(err => {\n        console.error(err);\n      })\n      .finally(() => dispatch(setSubmitting({ submitting: false })));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}