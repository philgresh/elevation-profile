{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/phil/Documents/elevation-profile/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  flex: 1 1 auto;\\n  background-color: #ffffff;\\n  color: teal;\\n  &:hover {\\n    background-color: #dddddd;\\n    color: #004040;\\n  }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  flex: 2 1 auto;\\n  border: none;\\n  background: teal;\\n  color: white;\\n  font-size: 1rem;\\n  border-radius: 0.5rem;\\n  padding: 1rem;\\n  margin: 1rem;\\n  -webkit-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\\n  -moz-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\\n  box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\\n  cursor: pointer;\\n  &:hover {\\n    background-color: #006464;\\n  }\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  display: flex;\\n  position: fixed;\\n  flex-wrap: wrap;\\n  z-index: 5;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}/* eslint-disable react/prop-types */import React from'react';import{connect}from'react-redux';import Loading from'react-simple-loading';import styled from'styled-components';import{getElevationDataAction}from'./store/actions/chartActions';import{clearPinsAction}from'./store/actions/mapActions';var StyledButtons=styled.div(_templateObject());var StyledButton=styled.button(_templateObject2());var StyledClearButton=styled(StyledButton)(_templateObject3());var GetElevationProfileButton=function GetElevationProfileButton(_ref){var getElevationData=_ref.getElevationData,submitting=_ref.submitting,numPins=_ref.numPins;var disabled=submitting;var buttonText=React.createElement(React.Fragment,null,React.createElement(\"strong\",null,\"Get my elevation profile!\"),React.createElement(\"br\",null),\"Or click to add more points\");if(numPins===0)buttonText='Click anywhere to drop an endpoint';if(numPins===1){buttonText='Click anywhere to drop another endpoint';disabled=true;}return React.createElement(StyledButton,{disabled:disabled,onClick:getElevationData,id:\"get-elevation-profile-button\"},submitting?React.createElement(Loading,null):buttonText);};var ClearPinsButton=function ClearPinsButton(_ref2){var disabled=_ref2.disabled,clearPins=_ref2.clearPins;return React.createElement(StyledClearButton,{onClick:clearPins,disabled:disabled,id:\"clear-button\"},\"Clear pins\");};var Buttons=function Buttons(_ref3){var getElevationData=_ref3.getElevationData,clearPins=_ref3.clearPins,numPins=_ref3.numPins,submitting=_ref3.submitting;var hasPins=numPins>0;return React.createElement(StyledButtons,null,React.createElement(GetElevationProfileButton,{getElevationData:getElevationData,submitting:submitting,numPins:numPins}),hasPins&&React.createElement(ClearPinsButton,{clearPins:clearPins,disabled:!hasPins||submitting}));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getElevationData:function getElevationData(){return dispatch(getElevationDataAction());},clearPins:function clearPins(){return dispatch(clearPinsAction());}};};var mapStateToProps=function mapStateToProps(state){return{submitting:state.chart.submitting,numPins:state.map.pins.length};};export default connect(mapStateToProps,mapDispatchToProps)(Buttons);","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/Buttons.js"],"names":["React","connect","Loading","styled","getElevationDataAction","clearPinsAction","StyledButtons","div","StyledButton","button","StyledClearButton","GetElevationProfileButton","getElevationData","submitting","numPins","disabled","buttonText","ClearPinsButton","clearPins","Buttons","hasPins","mapDispatchToProps","dispatch","mapStateToProps","state","chart","map","pins","length"],"mappings":"4oCAAA,qCACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,sBAAT,KAAuC,8BAAvC,CACA,OAASC,eAAT,KAAgC,4BAAhC,CAEA,GAAMC,CAAAA,aAAa,CAAGH,MAAM,CAACI,GAAV,mBAAnB,CAOA,GAAMC,CAAAA,YAAY,CAAGL,MAAM,CAACM,MAAV,oBAAlB,CAkBA,GAAMC,CAAAA,iBAAiB,CAAGP,MAAM,CAACK,YAAD,CAAT,oBAAvB,CAUA,GAAMG,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,MAI5B,IAHJC,CAAAA,gBAGI,MAHJA,gBAGI,CAFJC,UAEI,MAFJA,UAEI,CADJC,OACI,MADJA,OACI,CACJ,GAAIC,CAAAA,QAAQ,CAAGF,UAAf,CACA,GAAIG,CAAAA,UAAU,CACZ,wCACE,8DADF,CAEE,8BAFF,+BADF,CAOA,GAAIF,OAAO,GAAK,CAAhB,CAAmBE,UAAU,CAAG,oCAAb,CACnB,GAAIF,OAAO,GAAK,CAAhB,CAAmB,CACjBE,UAAU,CAAG,yCAAb,CACAD,QAAQ,CAAG,IAAX,CACD,CACD,MACE,qBAAC,YAAD,EACE,QAAQ,CAAEA,QADZ,CAEE,OAAO,CAAEH,gBAFX,CAGE,EAAE,CAAC,8BAHL,EAKGC,UAAU,CAAG,oBAAC,OAAD,MAAH,CAAiBG,UAL9B,CADF,CASD,CA3BD,CA6BA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,WAAGF,CAAAA,QAAH,OAAGA,QAAH,CAAaG,SAAb,OAAaA,SAAb,OACtB,qBAAC,iBAAD,EAAmB,OAAO,CAAEA,SAA5B,CAAuC,QAAQ,CAAEH,QAAjD,CAA2D,EAAE,CAAC,cAA9D,eADsB,EAAxB,CAMA,GAAMI,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,OAA0D,IAAvDP,CAAAA,gBAAuD,OAAvDA,gBAAuD,CAArCM,SAAqC,OAArCA,SAAqC,CAA1BJ,OAA0B,OAA1BA,OAA0B,CAAjBD,UAAiB,OAAjBA,UAAiB,CACxE,GAAMO,CAAAA,OAAO,CAAGN,OAAO,CAAG,CAA1B,CACA,MACE,qBAAC,aAAD,MACE,oBAAC,yBAAD,EACE,gBAAgB,CAAEF,gBADpB,CAEE,UAAU,CAAEC,UAFd,CAGE,OAAO,CAAEC,OAHX,EADF,CAMGM,OAAO,EACN,oBAAC,eAAD,EACE,SAAS,CAAEF,SADb,CAEE,QAAQ,CAAE,CAACE,OAAD,EAAYP,UAFxB,EAPJ,CADF,CAeD,CAjBD,CAmBA,GAAMQ,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACrC,MAAO,CACLV,gBAAgB,CAAE,kCAAMU,CAAAA,QAAQ,CAAClB,sBAAsB,EAAvB,CAAd,EADb,CAELc,SAAS,CAAE,2BAAMI,CAAAA,QAAQ,CAACjB,eAAe,EAAhB,CAAd,EAFN,CAAP,CAID,CALD,CAOA,GAAMkB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,CAC/B,MAAO,CACLX,UAAU,CAAEW,KAAK,CAACC,KAAN,CAAYZ,UADnB,CAELC,OAAO,CAAEU,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeC,MAFnB,CAAP,CAID,CALD,CAOA,cAAe3B,CAAAA,OAAO,CAACsB,eAAD,CAAkBF,kBAAlB,CAAP,CAA6CF,OAA7C,CAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Loading from 'react-simple-loading';\nimport styled from 'styled-components';\nimport { getElevationDataAction } from './store/actions/chartActions';\nimport { clearPinsAction } from './store/actions/mapActions';\n\nconst StyledButtons = styled.div`\n  display: flex;\n  position: fixed;\n  flex-wrap: wrap;\n  z-index: 5;\n`;\n\nconst StyledButton = styled.button`\n  flex: 2 1 auto;\n  border: none;\n  background: teal;\n  color: white;\n  font-size: 1rem;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  margin: 1rem;\n  -webkit-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  -moz-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  cursor: pointer;\n  &:hover {\n    background-color: #006464;\n  }\n`;\n\nconst StyledClearButton = styled(StyledButton)`\n  flex: 1 1 auto;\n  background-color: #ffffff;\n  color: teal;\n  &:hover {\n    background-color: #dddddd;\n    color: #004040;\n  }\n`;\n\nconst GetElevationProfileButton = ({\n  getElevationData,\n  submitting,\n  numPins,\n}) => {\n  let disabled = submitting;\n  let buttonText = (\n    <>\n      <strong>Get my elevation profile!</strong>\n      <br />\n      Or click to add more points\n    </>\n  );\n  if (numPins === 0) buttonText = 'Click anywhere to drop an endpoint';\n  if (numPins === 1) {\n    buttonText = 'Click anywhere to drop another endpoint';\n    disabled = true;\n  }\n  return (\n    <StyledButton\n      disabled={disabled}\n      onClick={getElevationData}\n      id=\"get-elevation-profile-button\"\n    >\n      {submitting ? <Loading /> : buttonText}\n    </StyledButton>\n  );\n};\n\nconst ClearPinsButton = ({ disabled, clearPins }) => (\n  <StyledClearButton onClick={clearPins} disabled={disabled} id=\"clear-button\">\n    Clear pins\n  </StyledClearButton>\n);\n\nconst Buttons = ({ getElevationData, clearPins, numPins, submitting }) => {\n  const hasPins = numPins > 0;\n  return (\n    <StyledButtons>\n      <GetElevationProfileButton\n        getElevationData={getElevationData}\n        submitting={submitting}\n        numPins={numPins}\n      />\n      {hasPins && (\n        <ClearPinsButton\n          clearPins={clearPins}\n          disabled={!hasPins || submitting}\n        />\n      )}\n    </StyledButtons>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getElevationData: () => dispatch(getElevationDataAction()),\n    clearPins: () => dispatch(clearPinsAction()),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    submitting: state.chart.submitting,\n    numPins: state.map.pins.length,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);\n"]},"metadata":{},"sourceType":"module"}