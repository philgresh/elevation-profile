{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Documents/elevation-profile/src/Buttons.js\";\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Loading from 'react-simple-loading';\nimport styled from 'styled-components';\nimport { getElevationDataAction } from './store/actions/chartActions';\nimport { clearPinsAction } from './store/actions/mapActions';\nconst StyledButtons = styled.div`\n  display: flex;\n  position: fixed;\n  flex-wrap: wrap;\n  z-index: 5;\n`;\nconst StyledButton = styled.button`\n  flex: 2 1 auto;\n  border: none;\n  background: teal;\n  color: white;\n  font-size: 1rem;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  margin: 1rem;\n  -webkit-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  -moz-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  cursor: pointer;\n  &:hover {\n    background-color: #006464;\n  }\n`;\nconst StyledClearButton = styled(StyledButton)`\n  flex: 1 1 auto;\n  background-color: #ffffff;\n  color: teal;\n  &:hover {\n    background-color: #dddddd;\n    color: #004040;\n  }\n`;\n\nconst GetElevationProfileButton = ({\n  getElevationData,\n  submitting,\n  numPins\n}) => {\n  let disabled = numPins >= 2;\n  let buttonText = React.createElement(React.Fragment, null, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Get my elevation profile!\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), \"Or click to add more points\");\n  if (numPins === 0) buttonText = 'Click anywhere to drop an endpoint';\n\n  if (numPins === 1) {\n    buttonText = 'Click anywhere to drop another endpoint';\n    disabled = true;\n  }\n\n  return React.createElement(StyledButton, {\n    disabled: disabled,\n    onClick: getElevationData,\n    id: \"get-elevation-profile-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, submitting ? React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : buttonText);\n};\n\nconst ClearPinsButton = ({\n  disabled,\n  clearPins\n}) => React.createElement(StyledClearButton, {\n  onClick: clearPins,\n  disabled: disabled,\n  id: \"clear-button\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}, \"Clear pins\");\n\nconst Buttons = ({\n  getElevationData,\n  clearPins,\n  numPins,\n  submitting\n}) => {\n  const hasPins = numPins > 0;\n  return React.createElement(StyledButtons, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(GetElevationProfileButton, {\n    getElevationData: getElevationData,\n    submitting: submitting,\n    numPins: numPins,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), hasPins && React.createElement(ClearPinsButton, {\n    clearPins: clearPins,\n    disabled: !hasPins || submitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getElevationData: () => dispatch(getElevationDataAction()),\n    clearPins: () => dispatch(clearPinsAction())\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    submitting: state.chart.submitting,\n    numPins: state.map.pins.length\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/Buttons.js"],"names":["React","connect","Loading","styled","getElevationDataAction","clearPinsAction","StyledButtons","div","StyledButton","button","StyledClearButton","GetElevationProfileButton","getElevationData","submitting","numPins","disabled","buttonText","ClearPinsButton","clearPins","Buttons","hasPins","mapDispatchToProps","dispatch","mapStateToProps","state","chart","map","pins","length"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Loading from 'react-simple-loading';\nimport styled from 'styled-components';\nimport { getElevationDataAction } from './store/actions/chartActions';\nimport { clearPinsAction } from './store/actions/mapActions';\n\nconst StyledButtons = styled.div`\n  display: flex;\n  position: fixed;\n  flex-wrap: wrap;\n  z-index: 5;\n`;\n\nconst StyledButton = styled.button`\n  flex: 2 1 auto;\n  border: none;\n  background: teal;\n  color: white;\n  font-size: 1rem;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  margin: 1rem;\n  -webkit-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  -moz-box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  box-shadow: 0px 5px 5px 1px rgba(34, 34, 34, 0.5);\n  cursor: pointer;\n  &:hover {\n    background-color: #006464;\n  }\n`;\n\nconst StyledClearButton = styled(StyledButton)`\n  flex: 1 1 auto;\n  background-color: #ffffff;\n  color: teal;\n  &:hover {\n    background-color: #dddddd;\n    color: #004040;\n  }\n`;\n\nconst GetElevationProfileButton = ({\n  getElevationData,\n  submitting,\n  numPins,\n}) => {\n  let disabled = numPins >= 2;\n  let buttonText = (\n    <>\n      <strong>Get my elevation profile!</strong>\n      <br />\n      Or click to add more points\n    </>\n  );\n  if (numPins === 0) buttonText = 'Click anywhere to drop an endpoint';\n  if (numPins === 1) {\n    buttonText = 'Click anywhere to drop another endpoint';\n    disabled = true;\n  }\n  return (\n    <StyledButton\n      disabled={disabled}\n      onClick={getElevationData}\n      id=\"get-elevation-profile-button\"\n    >\n      {submitting ? <Loading /> : buttonText}\n    </StyledButton>\n  );\n};\n\nconst ClearPinsButton = ({ disabled, clearPins }) => (\n  <StyledClearButton onClick={clearPins} disabled={disabled} id=\"clear-button\">\n    Clear pins\n  </StyledClearButton>\n);\n\nconst Buttons = ({ getElevationData, clearPins, numPins, submitting }) => {\n  const hasPins = numPins > 0;\n  return (\n    <StyledButtons>\n      <GetElevationProfileButton\n        getElevationData={getElevationData}\n        submitting={submitting}\n        numPins={numPins}\n      />\n      {hasPins && (\n        <ClearPinsButton\n          clearPins={clearPins}\n          disabled={!hasPins || submitting}\n        />\n      )}\n    </StyledButtons>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getElevationData: () => dispatch(getElevationDataAction()),\n    clearPins: () => dispatch(clearPinsAction()),\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    submitting: state.chart.submitting,\n    numPins: state.map.pins.length,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Buttons);\n"]},"metadata":{},"sourceType":"module"}