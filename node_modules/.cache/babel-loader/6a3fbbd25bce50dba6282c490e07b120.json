{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Documents/elevation-profile/src/MapboxContainer/MapboxContainer.js\";\n\n/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ReactMapGL, { Layer, NavigationControl, Source } from 'react-map-gl';\nimport update from 'immutability-helper';\nimport styled from 'styled-components';\nimport Markers from './Markers';\nimport { pushPinAction, setPinsAction } from '../store/actions/mapActions';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_API_KEY;\nconst mapStyle = 'mapbox://styles/pgres54268/cjuiu9aay60dx1fp784rt3x7r';\nconst StyledMap = styled.div`\n  transition: all 1.5s ease-in-out;\n  /* transition: transform 300ms ease-in-out; */\n`;\n\nconst MapboxContainer = ({\n  mapHeight,\n  pins,\n  actions\n}) => {\n  const hasPins = pins.length > 0;\n  const {\n    pushPin,\n    setPins\n  } = actions;\n  const [viewport, setViewport] = useState({\n    height: '100vh',\n    width: '100vw',\n    position: 'absolute',\n    longitude: -119,\n    latitude: 36,\n    zoom: 5\n  });\n  useEffect(() => setViewport(oldViewport => ({ ...oldViewport,\n    height: mapHeight\n  })), [mapHeight, pins]);\n\n  const onMapClick = e => {\n    e.preventDefault();\n    pushPin(e.lngLat);\n  };\n\n  const onMarkerDragEnd = (e, index) => {\n    e.preventDefault();\n    const newPins = update(pins, {\n      [index]: {\n        $set: [...e.lngLat]\n      }\n    });\n    setPins(newPins);\n  };\n\n  const onViewportChange = nextViewport => {\n    if (viewport.longitude * nextViewport.longitude < 0) {// TODO:\n      // We are moving across the antimeridian and need to\n      //   re-plot any pins near it\n      // const newPins = replotPinsNearAntimeridian(pins);\n      // console.log(pins, newPins);\n      // setPins(newPins);\n    }\n\n    setViewport({ ...nextViewport,\n      width: '100vw'\n    });\n  };\n\n  const linestringGeoJSON = {\n    type: 'LineString',\n    coordinates: [...pins]\n  };\n  return React.createElement(StyledMap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(ReactMapGL, Object.assign({\n    mapboxApiAccessToken: MAPBOX_TOKEN,\n    mapStyle: mapStyle,\n    onViewportChange: onViewportChange,\n    onClick: e => onMapClick(e) // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, viewport, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), hasPins && React.createElement(\"div\", {\n    id: \"pin-markers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Markers, {\n    pins: pins,\n    onMarkerDragEnd: onMarkerDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Source, {\n    id: \"my-lines\",\n    type: \"geojson\",\n    data: linestringGeoJSON,\n    lineMetrics: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Layer, {\n    id: \"lines\",\n    type: \"line\",\n    paint: {\n      'line-color': '#ff0000',\n      'line-width': 2,\n      'line-gradient': ['interpolate', ['linear'], ['line-progress'], 0, 'blue', 0.1, 'royalblue', 0.3, 'cyan', 0.5, 'lime', 0.7, 'yellow', 1, 'red']\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      right: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(NavigationControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }))));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: {\n      pushPin: pin => dispatch(pushPinAction(pin)),\n      setPins: pins => dispatch(setPinsAction(pins))\n    }\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    submitting: state.chart.submitting,\n    pins: state.map.pins // mapHeight: state.mapHeight,\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapboxContainer);","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/MapboxContainer/MapboxContainer.js"],"names":["React","useState","useEffect","connect","ReactMapGL","Layer","NavigationControl","Source","update","styled","Markers","pushPinAction","setPinsAction","MAPBOX_TOKEN","process","env","REACT_APP_MAPBOX_API_KEY","mapStyle","StyledMap","div","MapboxContainer","mapHeight","pins","actions","hasPins","length","pushPin","setPins","viewport","setViewport","height","width","position","longitude","latitude","zoom","oldViewport","onMapClick","e","preventDefault","lngLat","onMarkerDragEnd","index","newPins","$set","onViewportChange","nextViewport","linestringGeoJSON","type","coordinates","right","mapDispatchToProps","dispatch","pin","mapStateToProps","state","submitting","chart","map"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,IAAqBC,KAArB,EAA4BC,iBAA5B,EAA+CC,MAA/C,QAA6D,cAA7D;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,6BAA7C;AACA,OAAO,8BAAP;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAjC;AACA,MAAMC,QAAQ,GAAG,sDAAjB;AAEA,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAI;;;CAA7B;;AAKA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAD,KAAkC;AACxD,QAAMC,OAAO,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA9B;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,OAA7B;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC;AACvC6B,IAAAA,MAAM,EAAE,OAD+B;AAEvCC,IAAAA,KAAK,EAAE,OAFgC;AAGvCC,IAAAA,QAAQ,EAAE,UAH6B;AAIvCC,IAAAA,SAAS,EAAE,CAAC,GAJ2B;AAKvCC,IAAAA,QAAQ,EAAE,EAL6B;AAMvCC,IAAAA,IAAI,EAAE;AANiC,GAAD,CAAxC;AASAjC,EAAAA,SAAS,CACP,MAAM2B,WAAW,CAACO,WAAW,KAAK,EAAE,GAAGA,WAAL;AAAkBN,IAAAA,MAAM,EAAET;AAA1B,GAAL,CAAZ,CADV,EAEP,CAACA,SAAD,EAAYC,IAAZ,CAFO,CAAT;;AAKA,QAAMe,UAAU,GAAGC,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAb,IAAAA,OAAO,CAACY,CAAC,CAACE,MAAH,CAAP;AACD,GAHD;;AAKA,QAAMC,eAAe,GAAG,CAACH,CAAD,EAAII,KAAJ,KAAc;AACpCJ,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMI,OAAO,GAAGnC,MAAM,CAACc,IAAD,EAAO;AAC3B,OAACoB,KAAD,GAAS;AAAEE,QAAAA,IAAI,EAAE,CAAC,GAAGN,CAAC,CAACE,MAAN;AAAR;AADkB,KAAP,CAAtB;AAGAb,IAAAA,OAAO,CAACgB,OAAD,CAAP;AACD,GAND;;AAQA,QAAME,gBAAgB,GAAGC,YAAY,IAAI;AACvC,QAAIlB,QAAQ,CAACK,SAAT,GAAqBa,YAAY,CAACb,SAAlC,GAA8C,CAAlD,EAAqD,CACnD;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDJ,IAAAA,WAAW,CAAC,EACV,GAAGiB,YADO;AAEVf,MAAAA,KAAK,EAAE;AAFG,KAAD,CAAX;AAID,GAdD;;AAgBA,QAAMgB,iBAAiB,GAAG;AAAEC,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,WAAW,EAAE,CAAC,GAAG3B,IAAJ;AAAnC,GAA1B;AACA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,oBAAoB,EAAET,YADxB;AAEE,IAAA,QAAQ,EAAEI,QAFZ;AAGE,IAAA,gBAAgB,EAAE4B,gBAHpB;AAIE,IAAA,OAAO,EAAEP,CAAC,IAAID,UAAU,CAACC,CAAD,CAJ1B,CAKE;;AALF,KAMMV,QANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQGJ,OAAO,IACN;AAAK,IAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEF,IAAf;AAAqB,IAAA,eAAe,EAAEmB,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,IAAI,EAAEM,iBAHR;AAIE,IAAA,WAAW,MAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,KAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,KAAK,EAAE;AACL,oBAAc,SADT;AAEL,oBAAc,CAFT;AAGL,uBAAiB,CACf,aADe,EAEf,CAAC,QAAD,CAFe,EAGf,CAAC,eAAD,CAHe,EAIf,CAJe,EAKf,MALe,EAMf,GANe,EAOf,WAPe,EAQf,GARe,EASf,MATe,EAUf,GAVe,EAWf,MAXe,EAYf,GAZe,EAaf,QAbe,EAcf,CAde,EAef,KAfe;AAHZ,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAFF,CATJ,EA6CE;AAAK,IAAA,KAAK,EAAE;AAAEf,MAAAA,QAAQ,EAAE,UAAZ;AAAwBkB,MAAAA,KAAK,EAAE;AAA/B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7CF,CADF,CADF;AAqDD,CApGD;;AAsGA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL7B,IAAAA,OAAO,EAAE;AACPG,MAAAA,OAAO,EAAE2B,GAAG,IAAID,QAAQ,CAACzC,aAAa,CAAC0C,GAAD,CAAd,CADjB;AAEP1B,MAAAA,OAAO,EAAEL,IAAI,IAAI8B,QAAQ,CAACxC,aAAa,CAACU,IAAD,CAAd;AAFlB;AADJ,GAAP;AAMD,CAPD;;AASA,MAAMgC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,UAAU,EAAED,KAAK,CAACE,KAAN,CAAYD,UADnB;AAELlC,IAAAA,IAAI,EAAEiC,KAAK,CAACG,GAAN,CAAUpC,IAFX,CAGL;;AAHK,GAAP;AAKD,CAND;;AAQA,eAAenB,OAAO,CAACmD,eAAD,EAAkBH,kBAAlB,CAAP,CAA6C/B,eAA7C,CAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ReactMapGL, { Layer, NavigationControl, Source } from 'react-map-gl';\nimport update from 'immutability-helper';\nimport styled from 'styled-components';\nimport Markers from './Markers';\nimport { pushPinAction, setPinsAction } from '../store/actions/mapActions';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_API_KEY;\nconst mapStyle = 'mapbox://styles/pgres54268/cjuiu9aay60dx1fp784rt3x7r';\n\nconst StyledMap = styled.div`\n  transition: all 1.5s ease-in-out;\n  /* transition: transform 300ms ease-in-out; */\n`;\n\nconst MapboxContainer = ({ mapHeight, pins, actions }) => {\n  const hasPins = pins.length > 0;\n  const { pushPin, setPins } = actions;\n  const [viewport, setViewport] = useState({\n    height: '100vh',\n    width: '100vw',\n    position: 'absolute',\n    longitude: -119,\n    latitude: 36,\n    zoom: 5,\n  });\n\n  useEffect(\n    () => setViewport(oldViewport => ({ ...oldViewport, height: mapHeight })),\n    [mapHeight, pins],\n  );\n\n  const onMapClick = e => {\n    e.preventDefault();\n    pushPin(e.lngLat);\n  };\n\n  const onMarkerDragEnd = (e, index) => {\n    e.preventDefault();\n    const newPins = update(pins, {\n      [index]: { $set: [...e.lngLat] },\n    });\n    setPins(newPins);\n  };\n\n  const onViewportChange = nextViewport => {\n    if (viewport.longitude * nextViewport.longitude < 0) {\n      // TODO:\n      // We are moving across the antimeridian and need to\n      //   re-plot any pins near it\n      // const newPins = replotPinsNearAntimeridian(pins);\n      // console.log(pins, newPins);\n      // setPins(newPins);\n    }\n\n    setViewport({\n      ...nextViewport,\n      width: '100vw',\n    });\n  };\n\n  const linestringGeoJSON = { type: 'LineString', coordinates: [...pins] };\n  return (\n    <StyledMap>\n      <ReactMapGL\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        mapStyle={mapStyle}\n        onViewportChange={onViewportChange}\n        onClick={e => onMapClick(e)}\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...viewport}\n      >\n        {hasPins && (\n          <div id=\"pin-markers\">\n            <Markers pins={pins} onMarkerDragEnd={onMarkerDragEnd} />\n            <Source\n              id=\"my-lines\"\n              type=\"geojson\"\n              data={linestringGeoJSON}\n              lineMetrics\n            >\n              <Layer\n                id=\"lines\"\n                type=\"line\"\n                paint={{\n                  'line-color': '#ff0000',\n                  'line-width': 2,\n                  'line-gradient': [\n                    'interpolate',\n                    ['linear'],\n                    ['line-progress'],\n                    0,\n                    'blue',\n                    0.1,\n                    'royalblue',\n                    0.3,\n                    'cyan',\n                    0.5,\n                    'lime',\n                    0.7,\n                    'yellow',\n                    1,\n                    'red',\n                  ],\n                }}\n              />\n            </Source>\n          </div>\n        )}\n        <div style={{ position: 'absolute', right: 0 }}>\n          <NavigationControl />\n        </div>\n      </ReactMapGL>\n    </StyledMap>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: {\n      pushPin: pin => dispatch(pushPinAction(pin)),\n      setPins: pins => dispatch(setPinsAction(pins)),\n    },\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    submitting: state.chart.submitting,\n    pins: state.map.pins,\n    // mapHeight: state.mapHeight,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapboxContainer);\n"]},"metadata":{},"sourceType":"module"}