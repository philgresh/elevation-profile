{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst axios_1 = require(\"axios\");\n\nconst merge = require(\"deepmerge\");\n\nconst index_1 = require(\"./index\");\n\nconst agentkeepalive_1 = require(\"agentkeepalive\");\n\nconst directions_1 = require(\"./directions\");\n\nconst distance_1 = require(\"./distance\");\n\nconst elevation_1 = require(\"./elevation\");\n\nconst geolocate_1 = require(\"./geolocate\");\n\nconst timezone_1 = require(\"./timezone\");\n\nconst geocode_1 = require(\"./geocode/geocode\");\n\nconst reversegeocode_1 = require(\"./geocode/reversegeocode\");\n\nconst autocomplete_1 = require(\"./places/autocomplete\");\n\nconst details_1 = require(\"./places/details\");\n\nconst findplacefromtext_1 = require(\"./places/findplacefromtext\");\n\nconst photo_1 = require(\"./places/photo\");\n\nconst placesnearby_1 = require(\"./places/placesnearby\");\n\nconst queryautocomplete_1 = require(\"./places/queryautocomplete\");\n\nconst textsearch_1 = require(\"./places/textsearch\");\n\nconst nearestroads_1 = require(\"./roads/nearestroads\");\n\nconst snaptoroads_1 = require(\"./roads/snaptoroads\");\n\nexports.defaultHttpsAgent = new agentkeepalive_1.HttpsAgent({\n  keepAlive: true\n});\nexports.defaultTimeout = 10000;\nexports.userAgent = `google-maps-services-node-${index_1.version}`;\nexports.X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\nconst defaultConfig = {\n  timeout: exports.defaultTimeout,\n  httpsAgent: exports.defaultHttpsAgent,\n  headers: {\n    \"User-Agent\": exports.userAgent\n  }\n};\nexports.defaultAxiosInstance = axios_1.default.create(defaultConfig);\n\nclass Client {\n  constructor({\n    axiosInstance,\n    config,\n    experienceId\n  }) {\n    if (axiosInstance && config) {\n      throw new Error(\"Provide one of axiosInstance or config.\");\n    }\n\n    if (axiosInstance) {\n      this.axiosInstance = axiosInstance; // Avoid changing this instance in any way that affects its behavior\n\n      this.axiosInstance.defaults.headers[\"User-Agent\"] = exports.userAgent;\n    } else if (config) {\n      this.axiosInstance = axios_1.default.create(merge(defaultConfig, config));\n    } else {\n      this.axiosInstance = exports.defaultAxiosInstance;\n    }\n\n    if (experienceId) {\n      this.setExperienceId(...experienceId);\n    }\n  }\n\n  setExperienceId(...ids) {\n    this.experienceId = ids;\n    this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\",\");\n  }\n\n  clearExperienceId() {\n    this.experienceId = null;\n    this.clearExperienceIdHeader();\n  }\n\n  clearExperienceIdHeader() {\n    delete this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID];\n  }\n\n  getExperienceId() {\n    return this.experienceId;\n  }\n\n  directions(request) {\n    return directions_1.directions(request, this.axiosInstance);\n  }\n\n  distancematrix(request) {\n    return distance_1.distancematrix(request, this.axiosInstance);\n  }\n\n  elevation(request) {\n    return elevation_1.elevation(request, this.axiosInstance);\n  }\n\n  timezone(request) {\n    return timezone_1.timezone(request, this.axiosInstance);\n  }\n\n  geolocate(request) {\n    return geolocate_1.geolocate(request, this.axiosInstance);\n  }\n\n  geocode(request) {\n    return geocode_1.geocode(request, this.axiosInstance);\n  }\n\n  reverseGeocode(request) {\n    return reversegeocode_1.reverseGeocode(request, this.axiosInstance);\n  }\n\n  placeAutocomplete(request) {\n    return autocomplete_1.placeAutocomplete(request, this.axiosInstance);\n  }\n\n  placeDetails(request) {\n    return details_1.placeDetails(request, this.axiosInstance);\n  }\n\n  findPlaceFromText(request) {\n    return findplacefromtext_1.findPlaceFromText(request, this.axiosInstance);\n  }\n\n  placePhoto(request) {\n    return photo_1.placePhoto(request, this.axiosInstance);\n  }\n\n  placesNearby(request) {\n    return placesnearby_1.placesNearby(request, this.axiosInstance);\n  }\n\n  placeQueryAutocomplete(request) {\n    return queryautocomplete_1.placeQueryAutocomplete(request, this.axiosInstance);\n  }\n\n  textSearch(request) {\n    return textsearch_1.textSearch(request, this.axiosInstance);\n  }\n\n  nearestRoads(request) {\n    return nearestroads_1.nearestRoads(request, this.axiosInstance);\n  }\n\n  snapToRoads(request) {\n    return snaptoroads_1.snapToRoads(request, this.axiosInstance);\n  }\n\n}\n\nexports.Client = Client;","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst merge = require(\"deepmerge\");\nconst index_1 = require(\"./index\");\nconst agentkeepalive_1 = require(\"agentkeepalive\");\nconst directions_1 = require(\"./directions\");\nconst distance_1 = require(\"./distance\");\nconst elevation_1 = require(\"./elevation\");\nconst geolocate_1 = require(\"./geolocate\");\nconst timezone_1 = require(\"./timezone\");\nconst geocode_1 = require(\"./geocode/geocode\");\nconst reversegeocode_1 = require(\"./geocode/reversegeocode\");\nconst autocomplete_1 = require(\"./places/autocomplete\");\nconst details_1 = require(\"./places/details\");\nconst findplacefromtext_1 = require(\"./places/findplacefromtext\");\nconst photo_1 = require(\"./places/photo\");\nconst placesnearby_1 = require(\"./places/placesnearby\");\nconst queryautocomplete_1 = require(\"./places/queryautocomplete\");\nconst textsearch_1 = require(\"./places/textsearch\");\nconst nearestroads_1 = require(\"./roads/nearestroads\");\nconst snaptoroads_1 = require(\"./roads/snaptoroads\");\nexports.defaultHttpsAgent = new agentkeepalive_1.HttpsAgent({ keepAlive: true });\nexports.defaultTimeout = 10000;\nexports.userAgent = `google-maps-services-node-${index_1.version}`;\nexports.X_GOOG_MAPS_EXPERIENCE_ID = \"X-GOOG-MAPS-EXPERIENCE-ID\";\nconst defaultConfig = {\n    timeout: exports.defaultTimeout,\n    httpsAgent: exports.defaultHttpsAgent,\n    headers: { \"User-Agent\": exports.userAgent }\n};\nexports.defaultAxiosInstance = axios_1.default.create(defaultConfig);\nclass Client {\n    constructor({ axiosInstance, config, experienceId }) {\n        if (axiosInstance && config) {\n            throw new Error(\"Provide one of axiosInstance or config.\");\n        }\n        if (axiosInstance) {\n            this.axiosInstance = axiosInstance;\n            // Avoid changing this instance in any way that affects its behavior\n            this.axiosInstance.defaults.headers[\"User-Agent\"] = exports.userAgent;\n        }\n        else if (config) {\n            this.axiosInstance = axios_1.default.create(merge(defaultConfig, config));\n        }\n        else {\n            this.axiosInstance = exports.defaultAxiosInstance;\n        }\n        if (experienceId) {\n            this.setExperienceId(...experienceId);\n        }\n    }\n    setExperienceId(...ids) {\n        this.experienceId = ids;\n        this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID] = ids.join(\",\");\n    }\n    clearExperienceId() {\n        this.experienceId = null;\n        this.clearExperienceIdHeader();\n    }\n    clearExperienceIdHeader() {\n        delete this.axiosInstance.defaults.headers[exports.X_GOOG_MAPS_EXPERIENCE_ID];\n    }\n    getExperienceId() {\n        return this.experienceId;\n    }\n    directions(request) {\n        return directions_1.directions(request, this.axiosInstance);\n    }\n    distancematrix(request) {\n        return distance_1.distancematrix(request, this.axiosInstance);\n    }\n    elevation(request) {\n        return elevation_1.elevation(request, this.axiosInstance);\n    }\n    timezone(request) {\n        return timezone_1.timezone(request, this.axiosInstance);\n    }\n    geolocate(request) {\n        return geolocate_1.geolocate(request, this.axiosInstance);\n    }\n    geocode(request) {\n        return geocode_1.geocode(request, this.axiosInstance);\n    }\n    reverseGeocode(request) {\n        return reversegeocode_1.reverseGeocode(request, this.axiosInstance);\n    }\n    placeAutocomplete(request) {\n        return autocomplete_1.placeAutocomplete(request, this.axiosInstance);\n    }\n    placeDetails(request) {\n        return details_1.placeDetails(request, this.axiosInstance);\n    }\n    findPlaceFromText(request) {\n        return findplacefromtext_1.findPlaceFromText(request, this.axiosInstance);\n    }\n    placePhoto(request) {\n        return photo_1.placePhoto(request, this.axiosInstance);\n    }\n    placesNearby(request) {\n        return placesnearby_1.placesNearby(request, this.axiosInstance);\n    }\n    placeQueryAutocomplete(request) {\n        return queryautocomplete_1.placeQueryAutocomplete(request, this.axiosInstance);\n    }\n    textSearch(request) {\n        return textsearch_1.textSearch(request, this.axiosInstance);\n    }\n    nearestRoads(request) {\n        return nearestroads_1.nearestRoads(request, this.axiosInstance);\n    }\n    snapToRoads(request) {\n        return snaptoroads_1.snapToRoads(request, this.axiosInstance);\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"script"}