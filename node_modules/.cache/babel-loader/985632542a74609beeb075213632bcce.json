{"ast":null,"code":"var _jsxFileName = \"/Users/phil/Documents/elevation-profile/src/Chart/chartSVGGenerator.js\";\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useRef } from 'react'; // import * as d3 from 'd3';\n\nimport { extent } from 'd3-array';\nimport { axisLeft } from 'd3-axis';\nimport { scaleDiverging, scaleLinear } from 'd3-scale';\nimport { select, selectAll } from 'd3-selection';\nimport { line as d3line, curveNatural } from 'd3-shape';\nimport { interpolateYlGnBu } from 'd3-scale-chromatic';\nimport SvgLines from 'react-mt-svg-lines';\n\nconst ChartSVG = ({\n  chartProps,\n  elevationData\n}) => {\n  const {\n    width,\n    height,\n    margin\n  } = chartProps;\n  const mainRef = useRef();\n  const waterlineRef = useRef();\n  useEffect(() => {\n    selectAll('svg > *').remove();\n    const mainSVG = select(mainRef);\n    const waterLine = select(waterlineRef);\n    mainSVG.attr('viewBox', [0, 0, width, height]);\n    waterLine.attr('viewBox', [0, 0, width, height]);\n    const elevExtent = extent(elevationData, point => point.elevation);\n    const color = scaleDiverging(t => interpolateYlGnBu(1 - t)).domain(elevExtent);\n    const x = scaleLinear().domain([0, elevationData.length]).range([margin.left, width - margin.right]);\n    const y = scaleLinear().domain(elevExtent).nice().range([height - margin.bottom, margin.top]);\n\n    const xAxis = g => g.attr('transform', `translate(0,${height - margin.bottom})`).call(g => g.select('.domain').remove());\n\n    const yAxis = g => g.attr('transform', `translate(${margin.left},0)`).call(axisLeft(y)).call(g => g.select('.domain').remove()).call(g => g.select('.tick:last-of-type text').append('tspan').text(' meters')); // const scaleIndex = scaleLinear()\n    //   .domain([0, elevationData.length])\n    //   .range([10, width - 10]);\n    // const scaleElev = scaleLinear()\n    //   .domain([maxElev, minElev])\n    //   .range([10, height]);\n\n\n    const line = d3line().curve(curveNatural).defined(d => !Number.isNaN(d.elevation)).x(d => x(d.index)).y(d => y(d.elevation));\n\n    if (y(0)) {\n      console.log(y(0));\n      mainSVG.append('line').attr('id', 'waterline').style('stroke', 'lightblue').style('stroke-opacity', 0.5).style('fill', 'none').style('stroke-width', 2).style('stroke-dasharray', '10 5 10').attr('x1', margin.left).attr('y1', y(0)).attr('x2', width - margin.right).attr('y2', y(0));\n    }\n\n    mainSVG.append('g').call(xAxis);\n    mainSVG.append('g').call(yAxis);\n    const mainSVGDefs = mainSVG.append('defs');\n    const mainGradient = mainSVGDefs.append('linearGradient').attr('id', 'mainGradient');\n    mainGradient.attr('id', 'gradient').attr('gradientUnits', 'userSpaceOnUse').attr('x1', 0).attr('y1', height - margin.bottom).attr('x2', 0).attr('y2', margin.top).selectAll('stop').join('stop').attr('offset', d => d).attr('stop-color', color.interpolator());\n    mainSVG.append('path').datum(elevationData).attr('fill', 'transparent') // .attr('stroke', 'url(#gradient)')\n    .attr('stroke-width', 3).attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('d', line) // .style('stroke', 'url(#gradient)');\n    .style('stroke', '#222');\n  }, [elevationData]);\n  return React.createElement(SvgLines, {\n    animate: true,\n    duration: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: mainRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n};\n\nexport default ChartSVG;","map":{"version":3,"sources":["/Users/phil/Documents/elevation-profile/src/Chart/chartSVGGenerator.js"],"names":["React","useEffect","useRef","extent","axisLeft","scaleDiverging","scaleLinear","select","selectAll","line","d3line","curveNatural","interpolateYlGnBu","SvgLines","ChartSVG","chartProps","elevationData","width","height","margin","mainRef","waterlineRef","remove","mainSVG","waterLine","attr","elevExtent","point","elevation","color","t","domain","x","length","range","left","right","y","nice","bottom","top","xAxis","g","call","yAxis","append","text","curve","defined","d","Number","isNaN","index","console","log","style","mainSVGDefs","mainGradient","join","interpolator","datum"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect, useRef } from 'react';\n// import * as d3 from 'd3';\nimport { extent } from 'd3-array';\nimport { axisLeft } from 'd3-axis';\nimport { scaleDiverging, scaleLinear } from 'd3-scale';\nimport { select, selectAll } from 'd3-selection';\nimport { line as d3line, curveNatural } from 'd3-shape';\nimport { interpolateYlGnBu } from 'd3-scale-chromatic';\nimport SvgLines from 'react-mt-svg-lines';\n\nconst ChartSVG = ({ chartProps, elevationData }) => {\n  const { width, height, margin } = chartProps;\n\n  const mainRef = useRef();\n  const waterlineRef = useRef();\n\n  useEffect(() => {\n    selectAll('svg > *').remove();\n    const mainSVG = select(mainRef);\n    const waterLine = select(waterlineRef);\n    mainSVG.attr('viewBox', [0, 0, width, height]);\n    waterLine.attr('viewBox', [0, 0, width, height]);\n    const elevExtent = extent(elevationData, point => point.elevation);\n    const color = scaleDiverging(t => interpolateYlGnBu(1 - t)).domain(\n      elevExtent,\n    );\n\n    const x = scaleLinear()\n      .domain([0, elevationData.length])\n      .range([margin.left, width - margin.right]);\n\n    const y = scaleLinear()\n      .domain(elevExtent)\n      .nice()\n      .range([height - margin.bottom, margin.top]);\n\n    const xAxis = g =>\n      g\n        .attr('transform', `translate(0,${height - margin.bottom})`)\n        .call(g => g.select('.domain').remove());\n\n    const yAxis = g =>\n      g\n        .attr('transform', `translate(${margin.left},0)`)\n        .call(axisLeft(y))\n        .call(g => g.select('.domain').remove())\n        .call(g =>\n          g\n            .select('.tick:last-of-type text')\n            .append('tspan')\n            .text(' meters'),\n        );\n\n    // const scaleIndex = scaleLinear()\n    //   .domain([0, elevationData.length])\n    //   .range([10, width - 10]);\n\n    // const scaleElev = scaleLinear()\n    //   .domain([maxElev, minElev])\n    //   .range([10, height]);\n\n    const line = d3line()\n      .curve(curveNatural)\n      .defined(d => !Number.isNaN(d.elevation))\n      .x(d => x(d.index))\n      .y(d => y(d.elevation));\n\n    if (y(0)) {\n      console.log(y(0));\n      mainSVG\n        .append('line')\n        .attr('id', 'waterline')\n        .style('stroke', 'lightblue')\n        .style('stroke-opacity', 0.5)\n        .style('fill', 'none')\n        .style('stroke-width', 2)\n        .style('stroke-dasharray', '10 5 10')\n        .attr('x1', margin.left)\n        .attr('y1', y(0))\n        .attr('x2', width - margin.right)\n        .attr('y2', y(0));\n    }\n\n    mainSVG.append('g').call(xAxis);\n    mainSVG.append('g').call(yAxis);\n\n    const mainSVGDefs = mainSVG.append('defs');\n\n    const mainGradient = mainSVGDefs\n      .append('linearGradient')\n      .attr('id', 'mainGradient');\n\n    mainGradient\n      .attr('id', 'gradient')\n      .attr('gradientUnits', 'userSpaceOnUse')\n      .attr('x1', 0)\n      .attr('y1', height - margin.bottom)\n      .attr('x2', 0)\n      .attr('y2', margin.top)\n      .selectAll('stop')\n      .join('stop')\n      .attr('offset', d => d)\n      .attr('stop-color', color.interpolator());\n\n    mainSVG\n      .append('path')\n      .datum(elevationData)\n      .attr('fill', 'transparent')\n      // .attr('stroke', 'url(#gradient)')\n      .attr('stroke-width', 3)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round')\n      .attr('d', line)\n      // .style('stroke', 'url(#gradient)');\n      .style('stroke', '#222');\n  }, [elevationData]);\n  return (\n    <SvgLines animate duration={500}>\n      <svg ref={mainRef} />\n    </SvgLines>\n  );\n};\n\nexport default ChartSVG;\n"]},"metadata":{},"sourceType":"module"}